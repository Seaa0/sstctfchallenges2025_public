#!sage
from math import gcd
from gmpy2 import iroot
from Crypto.Util.number import long_to_bytes, bytes_to_long as b2l

C1l = 924
Gr = (88331466171954861353082146511155335500242141009124509051225187800319109905365, 21702786498294954774608516293250469761515995687941277237659755595204137457192)
Crs = [(90627264074697252588632669574346563154516173006389893886556045619717900111626, 48147113253873005971278140311008037529504625001130520319937388240567287897234), (14426085594677118783680578857685259830874784205229667967850784853769124609336, 72979951969393633407017841491581887854911554532599152798124391299256208799774), (60726657820411185833094312693995785570189425970147002780511223235705207352325, 103133762188537328243574024457707545496622601056274981282780624051803781754047), (102107052396609570969381458395897181035868975229395504009652279597922305204026, 85096767889385627283402738059818083497256058419757498887162877714581752762711), (87096881068027870526993598040873710561333696650390069907343975089620161808522, 36880872025305064535854987299715839990010446167001098807472036835396311641667), (44568248928306278109249313164289109233142944141536148538583958321080748374725, 81404092017208060129444560775529858269661320630647238364294738214024998124662), (4108417595667169372521311779954657987548415112153581701058025573915249777940, 41635635235930688446410833673425966679368749845317626505934855686588016506467), (32607946749942679481979463737455391985233957190630914352715043570702271895943, 98358159876357004731981569574341986955984046413238581217548666744363727029624), (56383828379074436117406251703758890203020893149817062765062131486801370457578, 24561001146270387625523837620846990974793068710002004410874850126948659062154), (1520399548106367639643055154708465143201797822579096615346882112751064416742, 77417385729030738124082255246499045884001798129020976348558262331212602082646), (49090386385282243734644360609885683330284312216733397474277160375635474310195, 39919709166379653155247478818503077468004871673497546789695485509010228254245), (11872540769235458413827092413610329866246336898277285457576374847592165098297, 5302615556619902634697273805260501114897670013555296717930025321109195031862), (97071853964903869953775162981871718932216168763549365096295023195406839761292, 59431272493929587678188081679877642068501602152011732078559045597119133086802), (24414475620793852848034578433429137138572912772730742103527816917648918745276, 87510397805855773345275163749129982075989771777288357594570231577817314369684)]
Gs = (76526782342019282133484901683435905531369845899614494366632740398869997788093, 38511154904764963236255774343437307681437683252409176050919108899300177898167)
C0 = 142507454839746421240779185572799637192596559778695307704118869203223703173841055725895259803327497830465431795228730170633450721524540835534615645731599626474075545655979197934753189461876619989905497738101474470117269446669483874196688159530480787406805332711397029923862494884467423437559787184021067538937785833431947314340105410510344870225690253630159658554384516234344960534630570757681607723288825601003118129167779897083686595380987842582968012167176051681370643552077007676241316075520587114083290017545391616345404982372033326638423656605947395601328133846712826038095292165315414785381306260652788453445904642313065812800057598257186628227647231349231401278391919799263136100442943442571265525040996621864424473346743942041123891675431180630542993028557023924192220197556666023086988982204009262016170824089426977317117972593901084036459711819253712788676339943116385679516704879658736220625747152059085125906249
n = 1688017641272912392485462587625693929599863233916479953430420021093523638176812468254594530891178207934831956204015104783020864596035527678743805507440246661774923273775010709899641107094453898642710344669134076681204764779559761269944571412757775998540785042909682187376773520459380854019569935120149550254566216454643964026536165626855773011025365128035232165908783597249456859627865467873461371209023718843381693632374753620443157625213553265848886201696142854301070200726313952493385773483445470775371974019635102329327344804954371312113282547485902292209261869660420951551214593005893355287971690896827307099758119684394696171701881068499214708120150737586796265602890138624898885737913359061797631472971842371380259584843518711982857985735739816006220844558617045555924967699482869120912403030728224573802267007570935073634256243572414076367663450876568938575320285821444163854229696453522402586177155069031168415367168

a1 = 59
b1 = 28
a2 = 12013278315538447858528492054659222553764005924268130578980259416759339149784
b2 = 34812348137058347239824726793851394028362678168738873939877638588406041210697 

C02 = (-C0)%n
C0 -= b2
C0 %= n
C02 -= b2
C0 %= n

if iroot(C0,3)[1] == True:
    En = iroot(C0,3)[0]
else:
    En = iroot(C02,3)[0]

n //= 2**2048
r = gcd(En,n)

En //= r
n //= r

GsLHS = Gs[1]**2
GsRHS = Gs[0]**3+a2*Gs[0]+b2

s = gcd((GsLHS-GsRHS),n)

assert s != 1


Es = EllipticCurve(GF(s),(a2,b2))
En //= Es.order()

n //= s
P = (7,28)
p = 0

G = EllipticCurve(Zmod(n), [59, 28])(7, 28)
primes = [i[0] for i in list(factor(En, limit=2**20))[:-1]]
for prime in primes:
    try:
        _ = (En//prime) * G
    except ZeroDivisionError as err:
        pmul = int(str(err).split(" ")[2])
        p = gcd(pmul, n)
        if p != n:
            break

q = n//p

Er = EllipticCurve(GF(r),[a2,b2])

# code from https://wstein.org/edu/2010/414/projects/novotney.pdf
def HenselLift(P,p,prec):
    E = P.curve()
    Eq = E.change_ring(QQ)
    Ep = Eq.change_ring(Qp(p,prec))
    x_P,y_P = P.xy()
    x_lift = ZZ(x_P)
    y_lift = ZZ(y_P)
    x, y, a1, a2, a3, a4, a6 = var('x,y,a1,a2,a3,a4,a6')
    f(a1,a2,a3,a4,a6,x,y) = y^2 + a1*x*y + a3*y - x^3 - a2*x^2 - a4*x - a6
    g(y) = f(ZZ(Eq.a1()),ZZ(Eq.a2()),ZZ(Eq.a3()),ZZ(Eq.a4()),ZZ(Eq.a6()),ZZ(x_P),y)
    gDiff = g.diff()
    for i in range(1,prec):
        uInv = ZZ(gDiff(y=y_lift))
    u = uInv.inverse_mod(p^i)
    y_lift = y_lift - u*g(y_lift)
    y_lift = ZZ(Mod(y_lift,p^(i+1)))
    y_lift = y_lift+O(p^prec)
    return Ep([x_lift,y_lift])

def SmartAttack(P,Q,p,prec):
    E = P.curve()
    Eqq = E.change_ring(QQ)
    Eqp = Eqq.change_ring(Qp(p,prec))
    
    P_Qp = HenselLift(P,p,prec)
    Q_Qp = HenselLift(Q,p,prec)
    
    p_times_P = p*P_Qp
    p_times_Q=p*Q_Qp
    
    x_P,y_P = p_times_P.xy()
    x_Q,y_Q = p_times_Q.xy()
    
    phi_P = -(x_P/y_P)
    phi_Q = -(x_Q/y_Q)
    k = phi_Q/phi_P
    k = Mod(k,p)
    return k

C1 = ''
for i in range(len(Crs)):
    C1sect = SmartAttack(Er(Gr),Er(Crs[i]),r,2)
    C1sect = str(int(C1sect))
    if i != len(Crs)-1:
        C1 += C1sect.zfill(70)
    else:
        C1 += C1sect.zfill(C1l%70)

n = p*q*r*s*2**2048

C1 = int(C1)
C1 = ((C1-b1))%n
C1alt = -C1 % n

phi = (p-1)*(q-1)*(r-1)*(s-1)*(2**2048-2**2047)
d = pow(65537,-1,phi)

m1 = long_to_bytes(pow(C1,d,n))
m2 = long_to_bytes(pow(C1alt,d,n))

if m1[0] == 115:
    print(m1)
else:
    print(m2)