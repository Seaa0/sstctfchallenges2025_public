#!sage
from sage.all import EllipticCurve, GF
from secret import r,flag
from Crypto.Util.number import getPrime, isPrime, bytes_to_long
from random import choice

class ECSA:
    def __init__(self, e, b, N):
        assert e % 2 == 0
        self.e = e
        self.b = b
        self.N = N
    def lift_x(self, x):
        yield (pow(x,self.e//2,self.N)+self.b) % self.N
        yield (-(pow(x,self.e//2,self.N)+self.b)) % self.N

p,q,s= [getPrime(256) for _ in range(3)]
assert isPrime(r)


a1 = 59
b1 = 28
a2 = 12013278315538447858528492054659222553764005924268130578980259416759339149784
b2 = 34812348137058347239824726793851394028362678168738873939877638588406041210697

Ep = EllipticCurve(GF(p),[a1,b1])
Eq = EllipticCurve(GF(q),[a1,b1])
Er = EllipticCurve(GF(r),[a2,b2])
Es = EllipticCurve(GF(s),[a2,b2])

assert p != Ep.order()
assert q != Eq.order()
assert s != Es.order()

n = p*q*r*s*2**2048
n = 1688017641272912392485462587625693929599863233916479953430420021093523638176812468254594530891178207934831956204015104783020864596035527678743805507440246661774923273775010709899641107094453898642710344669134076681204764779559761269944571412757775998540785042909682187376773520459380854019569935120149550254566216454643964026536165626855773011025365128035232165908783597249456859627865467873461371209023718843381693632374753620443157625213553265848886201696142854301070200726313952493385773483445470775371974019635102329327344804954371312113282547485902292209261869660420951551214593005893355287971690896827307099758119684394696171701881068499214708120150737586796265602890138624898885737913359061797631472971842371380259584843518711982857985735739816006220844558617045555924967699482869120912403030728224573802267007570935073634256243572414076367663450876568938575320285821444163854229696453522402586177155069031168415367168
En = Ep.order()*Eq.order()*Er.order()*Es.order()

first = ECSA(131074,b1,n)
C1 = choice(list(first.lift_x(bytes_to_long(flag))))
C1 = str(C1)
C1l = len(C1)
print('C1l =',C1l)


Gr = Er.gen(0)
print('Gr =',Gr)

Crs = []
for i in range(0,len(C1)+1,70):
    C1sect = int(C1[i:i+70])
    Cr = (C1sect*Gr)
    Crs.append(Cr)
print('Crs =',Crs)

Gs = Es.gen(0)
print('Gs =',Gs)

final = ECSA(6,b2,n)
C0 = choice(list(final.lift_x(En)))
assert En**3 < n
print('C0 =',C0)
print('n =',n)
